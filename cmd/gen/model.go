package gen

import (
	"bytes"
	"database/sql"
	"deploy_server/config"
	"deploy_server/pkg/db"
	"fmt"
	"github.com/spf13/cobra"
	"go/format"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"
)

var (
	table      string
	structName string
)

var ModelCmd = &cobra.Command{
	Use:               "model",
	Short:             "gen model",
	Long:              "gen model",
	CompletionOptions: cobra.CompletionOptions{DisableDefaultCmd: true},
	Run:               GeneratorModel,
}

func init() {
	ModelCmd.Flags().StringVarP(&table, "table", "t", "", "[Required] The name of the db table name")
	ModelCmd.Flags().StringVarP(&structName, "struct", "s", "", "[Required] The name of the db table model")
}

type TableColumn struct {
	OrdinalPosition uint16 `db:"ORDINAL_POSITION"` // position
	ColumnName      string `db:"COLUMN_NAME"`      // name
	ColumnType      string `db:"COLUMN_TYPE"`      // column_type
	DataType        string `db:"DATA_TYPE"`        // data_type
	FieldName       string
	FieldType       string
	ColumnKey       sql.NullString `db:"COLUMN_KEY"`     // key
	IsNullable      string         `db:"IS_NULLABLE"`    // nullable
	Extra           sql.NullString `db:"EXTRA"`          // extra
	ColumnComment   string         `db:"COLUMN_COMMENT"` // comment
	ColumnDefault   sql.NullString `db:"COLUMN_DEFAULT"` // default value
	GORMType        string
}

type Values struct {
	PkgName    string
	TableName  string
	StructName string
	Fields     []TableColumn
}

// capitalize 格式化字符串
func capitalize(s string) string {
	var upperStr string
	chars := strings.Split(s, "_")
	for _, val := range chars {
		vv := []rune(val)
		for i := 0; i < len(vv); i++ {
			if i == 0 {
				if vv[i] >= 97 && vv[i] <= 122 {
					vv[i] -= 32
					upperStr += string(vv[i])
				}
			} else {
				upperStr += string(vv[i])
			}
		}
	}
	return upperStr
}

func gormType(s string) string {
	var gormTypeToGoType = map[string]string{
		"tinyint":    "int",
		"smallint":   "int",
		"mediumint":  "int",
		"int":        "int",
		"integer":    "int",
		"bigint":     "int",
		"float":      "float",
		"double":     "float",
		"decimal":    "float",
		"date":       "time",
		"time":       "time",
		"year":       "time",
		"datetime":   "time",
		"timestamp":  "time",
		"char":       "string",
		"varchar":    "string",
		"tinyblob":   "bytes",
		"tinytext":   "string",
		"blob":       "bytes",
		"text":       "string",
		"json":       "string",
		"mediumblob": "bytes",
		"mediumtext": "string",
		"longblob":   "bytes",
		"longtext":   "string",
	}
	return gormTypeToGoType[s]
}

// textType 获得数据库对应go中类型
func textType(s string) string {
	var mysqlTypeToGoType = map[string]string{
		"tinyint":    "int32",
		"smallint":   "int32",
		"mediumint":  "int32",
		"int":        "int32",
		"integer":    "int64",
		"bigint":     "int64",
		"float":      "float64",
		"double":     "float64",
		"decimal":    "float64",
		"date":       "string",
		"time":       "string",
		"year":       "string",
		"datetime":   "time.Time",
		"timestamp":  "time.Time",
		"char":       "string",
		"varchar":    "string",
		"tinyblob":   "string",
		"tinytext":   "string",
		"blob":       "string",
		"text":       "string",
		"json":       "string",
		"mediumblob": "string",
		"mediumtext": "string",
		"longblob":   "string",
		"longtext":   "string",
	}
	return mysqlTypeToGoType[s]
}

func parseTemplateOrPanic(t string) *template.Template {
	tpl, err := template.New("model_template").Parse(t)
	if err != nil {
		panic(err)
	}
	return tpl
}

var outputTemplate = parseTemplateOrPanic(`////////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gen model, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST              //
////////////////////////////////////////////////////////////

package {{.PkgName}}

//go:generate gormgen -s {{.StructName}} -i .
type {{.StructName}} struct {
{{range .Fields}}{{.FieldName}}		{{.FieldType}} ` + "`json:\"{{.ColumnName}}\" gorm:\"type:{{.GORMType}}\"`" + `		//{{.ColumnComment}}
{{ end}}}

func (_ *{{.StructName}}) TableName() string {
	return "{{.TableName}}"
}`)

func generatorFile(tableName string, structName string, columns []TableColumn) {
	values := Values{strings.ToLower(structName), tableName, structName, columns}
	buf := new(bytes.Buffer)
	err := outputTemplate.Execute(buf, values)
	if err != nil {
		panic(err)
	}

	//格式化代码
	formattedOutput, err := format.Source(buf.Bytes())
	if err != nil {
		panic(err)
	}
	buf = bytes.NewBuffer(formattedOutput)

	outDir := "model/" + strings.ToLower(structName)
	_ = os.Mkdir(outDir, os.ModePerm)

	//输出文件
	filename := fmt.Sprintf("%s/%s.go", outDir, strings.ToLower(structName))
	if err := ioutil.WriteFile(filename, buf.Bytes(), 0777); err != nil {
		log.Fatalln(err)
	}
	fmt.Printf("  └── generator model: %s, file: %s\n", structName, filename)
}

func GeneratorModel(cmd *cobra.Command, args []string) {
	if table == "" {
		_ = cmd.Usage()
		return
	}

	if structName == "" {
		_ = cmd.Usage()
		return
	}

	dbRepo, err := db.New()
	if err != nil {
		fmt.Printf("数据库连接失败: %s", err.Error())
	}

	dbR := dbRepo.GetDbR()
	defer dbRepo.DbRClose()
	sqlTableColumn := fmt.Sprintf("SELECT `ORDINAL_POSITION`,`COLUMN_NAME`,`COLUMN_TYPE`,`DATA_TYPE`,`COLUMN_KEY`,"+
		"`IS_NULLABLE`,`EXTRA`,`COLUMN_COMMENT`,`COLUMN_DEFAULT` FROM `information_schema`.`columns` WHERE `table_schema`= "+
		"'%s' AND `table_name`= '%s' ORDER BY `ORDINAL_POSITION` ASC",
		config.Get().MySQL.Read.Name, table)
	rows, err := dbR.Raw(sqlTableColumn).Rows()
	defer rows.Close()
	if err != nil {
		fmt.Printf("execute query table column action error, detail is [%v]\n", err.Error())
	}

	i := 0
	columns := make([]TableColumn, 0)
	for rows.Next() {
		i++
		var column TableColumn
		err = rows.Scan(
			&column.OrdinalPosition,
			&column.ColumnName,
			&column.ColumnType,
			&column.DataType,
			&column.ColumnKey,
			&column.IsNullable,
			&column.Extra,
			&column.ColumnComment,
			&column.ColumnDefault)
		if err != nil {
			fmt.Printf("query table column scan error, detail is [%v]\n", err.Error())
		}
		column.FieldName = capitalize(column.ColumnName)
		column.FieldType = textType(column.DataType)
		column.GORMType = gormType(column.DataType)
		columns = append(columns, column)
	}
	fmt.Printf("%s:%s", table, structName)
	generatorFile(table, structName, columns)
}
