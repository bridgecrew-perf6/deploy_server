///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package config

import (
	"deploy_server/model"
	"deploy_server/pkg/core"
	"fmt"
	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Config {
	return new(Config)
}

func NewQueryBuilder() *configQueryBuilder {
	return new(configQueryBuilder)
}

func (t *Config) Assign(src interface{}) {
	core.StructCopy(t, src)
}

func (t *Config) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *Config) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *Config) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&Config{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type configQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *configQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = qb.buildUpdateQuery(db).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *configQueryBuilder) buildUpdateQuery(db *gorm.DB) *gorm.DB {
	ret := db.Model(&Config{})
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	return ret
}

func (qb *configQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *configQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Config{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *configQueryBuilder) First(db *gorm.DB) (*Config, error) {
	ret := &Config{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *configQueryBuilder) QueryOne(db *gorm.DB) (*Config, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *configQueryBuilder) QueryAll(db *gorm.DB) ([]*Config, error) {
	var ret []*Config
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *configQueryBuilder) Limit(limit int) *configQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *configQueryBuilder) Offset(offset int) *configQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *configQueryBuilder) WhereId(p model.Predicate, value int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereIdIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereIdNotIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) OrderById(asc bool) *configQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *configQueryBuilder) WhereTitle(p model.Predicate, value string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", p),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereTitleIn(value []string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereTitleNotIn(value []string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "title", "NOT IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) OrderByTitle(asc bool) *configQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "title "+order)
	return qb
}

func (qb *configQueryBuilder) WhereKey(p model.Predicate, value string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "key", p),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereKeyIn(value []string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "key", "IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereKeyNotIn(value []string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "key", "NOT IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) OrderByKey(asc bool) *configQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "key "+order)
	return qb
}

func (qb *configQueryBuilder) WhereValue(p model.Predicate, value string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", p),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereValueIn(value []string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", "IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereValueNotIn(value []string) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "value", "NOT IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) OrderByValue(asc bool) *configQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "value "+order)
	return qb
}

func (qb *configQueryBuilder) WhereType(p model.Predicate, value int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", p),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereTypeIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereTypeNotIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "type", "NOT IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) OrderByType(asc bool) *configQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "type "+order)
	return qb
}

func (qb *configQueryBuilder) WhereCreatedAt(p model.Predicate, value int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", p),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereCreatedAtIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereCreatedAtNotIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "created_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) OrderByCreatedAt(asc bool) *configQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "created_at "+order)
	return qb
}

func (qb *configQueryBuilder) WhereUpdatedAt(p model.Predicate, value int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", p),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereUpdatedAtIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereUpdatedAtNotIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "updated_at", "NOT IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) OrderByUpdatedAt(asc bool) *configQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "updated_at "+order)
	return qb
}

func (qb *configQueryBuilder) WhereIsDelete(p model.Predicate, value int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_delete", p),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereIsDeleteIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_delete", "IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) WhereIsDeleteNotIn(value []int32) *configQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "is_delete", "NOT IN"),
		value,
	})
	return qb
}

func (qb *configQueryBuilder) OrderByIsDelete(asc bool) *configQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "is_delete "+order)
	return qb
}
