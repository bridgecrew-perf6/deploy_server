///////////////////////////////////////////////////////////
// THIS FILE IS AUTO GENERATED by gormgen, DON'T EDIT IT //
//        ANY CHANGES DONE HERE WILL BE LOST             //
///////////////////////////////////////////////////////////

package role

import (
	"fmt"

	"deploy_server/model"
	"deploy_server/pkg/core"
	"github.com/pkg/errors"
	"gorm.io/gorm"
)

func NewModel() *Role {
	return new(Role)
}

func NewQueryBuilder() *roleQueryBuilder {
	return new(roleQueryBuilder)
}

func (t *Role) Assign(src interface{}) {
	core.StructCopy(t, src)
}

func (t *Role) Create(db *gorm.DB) (id int32, err error) {
	if err = db.Create(t).Error; err != nil {
		return 0, errors.Wrap(err, "create err")
	}
	return t.Id, nil
}

func (t *Role) Delete(db *gorm.DB) (err error) {
	if err = db.Delete(t).Error; err != nil {
		return errors.Wrap(err, "delete err")
	}
	return nil
}

func (t *Role) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = db.Model(&Role{}).Where("id = ?", t.Id).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

type roleQueryBuilder struct {
	order []string
	where []struct {
		prefix string
		value  interface{}
	}
	limit  int
	offset int
}

func (qb *roleQueryBuilder) Updates(db *gorm.DB, m map[string]interface{}) (err error) {
	if err = qb.buildUpdateQuery(db).Updates(m).Error; err != nil {
		return errors.Wrap(err, "updates err")
	}
	return nil
}

func (qb *roleQueryBuilder) buildUpdateQuery(db *gorm.DB) *gorm.DB {
	ret := db.Model(&Role{})
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	return ret
}

func (qb *roleQueryBuilder) buildQuery(db *gorm.DB) *gorm.DB {
	ret := db
	for _, where := range qb.where {
		ret = ret.Where(where.prefix, where.value)
	}
	for _, order := range qb.order {
		ret = ret.Order(order)
	}
	ret = ret.Limit(qb.limit).Offset(qb.offset)
	return ret
}

func (qb *roleQueryBuilder) Count(db *gorm.DB) (int64, error) {
	var c int64
	res := qb.buildQuery(db).Model(&Role{}).Count(&c)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		c = 0
	}
	return c, res.Error
}

func (qb *roleQueryBuilder) First(db *gorm.DB) (*Role, error) {
	ret := &Role{}
	res := qb.buildQuery(db).First(ret)
	if res.Error != nil && res.Error == gorm.ErrRecordNotFound {
		ret = nil
	}
	return ret, res.Error
}

func (qb *roleQueryBuilder) QueryOne(db *gorm.DB) (*Role, error) {
	qb.limit = 1
	ret, err := qb.QueryAll(db)
	if len(ret) > 0 {
		return ret[0], err
	}
	return nil, err
}

func (qb *roleQueryBuilder) QueryAll(db *gorm.DB) ([]*Role, error) {
	var ret []*Role
	err := qb.buildQuery(db).Find(&ret).Error
	return ret, err
}

func (qb *roleQueryBuilder) Limit(limit int) *roleQueryBuilder {
	qb.limit = limit
	return qb
}

func (qb *roleQueryBuilder) Offset(offset int) *roleQueryBuilder {
	qb.offset = offset
	return qb
}

func (qb *roleQueryBuilder) WhereId(p model.Predicate, value int32) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", p),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) WhereIdIn(value []int32) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "IN"),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) WhereIdNotIn(value []int32) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "id", "NOT IN"),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) OrderById(asc bool) *roleQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "id "+order)
	return qb
}

func (qb *roleQueryBuilder) WhereRoleName(p model.Predicate, value string) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_name", p),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) WhereRoleNameIn(value []string) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_name", "IN"),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) WhereRoleNameNotIn(value []string) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_name", "NOT IN"),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) OrderByRoleName(asc bool) *roleQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "role_name "+order)
	return qb
}

func (qb *roleQueryBuilder) WhereRoleDesc(p model.Predicate, value string) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_desc", p),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) WhereRoleDescIn(value []string) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_desc", "IN"),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) WhereRoleDescNotIn(value []string) *roleQueryBuilder {
	qb.where = append(qb.where, struct {
		prefix string
		value  interface{}
	}{
		fmt.Sprintf("%v %v ?", "role_desc", "NOT IN"),
		value,
	})
	return qb
}

func (qb *roleQueryBuilder) OrderByRoleDesc(asc bool) *roleQueryBuilder {
	order := "DESC"
	if asc {
		order = "ASC"
	}

	qb.order = append(qb.order, "role_desc "+order)
	return qb
}
